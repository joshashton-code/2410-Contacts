Index: File.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.VisualBasic.FileIO;\n\nnamespace Contacts;\n\n/// <summary>\n/// \n/// </summary>\npublic class File\n{\n    public Contact Contact { get; }\n    private string _filepath;\n    private bool isGoogleCsv;\n\n    /// <summary>\n    /// Manages the parsing process and determines the correct parser to use based upon the filetype.\n    /// </summary>\n    public void Parse(string filepath)\n    {\n        _filepath = filepath;\n        String filetype = _filepath.Substring(_filepath.LastIndexOf('.'));\n\n        switch (filetype)\n        {\n            case \".csv\":\n                ParseCsv();\n                break;\n            case \".vcf\":\n                ParseVcf();\n                break;\n            case \".card\":\n                ParseCard();\n                break;\n        }\n    }\n\n    /// <summary>\n    /// Convert a CSV file into a List<string>, and determine if the input csv is in the Google contact format or the Outlook contact format.\n    /// </summary>\n    private void ParseCsv()\n    {\n        List<string> contactInfo = new List<string>();\n        using (TextFieldParser parser = new TextFieldParser(_filepath))\n        {\n            parser.TextFieldType = FieldType.Delimited;\n            parser.SetDelimiters(\",\");\n            while (!parser.EndOfData)\n            {\n                if (parser.PeekChars(5).Equals(\"Name,\"))\n                    isGoogleCsv = true;\n                else\n                    isGoogleCsv = false;\n                \n                parser.ReadLine();\n                //Processing row\n                string[] fields = parser.ReadFields();\n                foreach (string field in fields) \n                {\n                    if(!field.Equals(\"\"))\n                        contactInfo.Add(field);\n                }\n            }\n        }\n        if(isGoogleCsv)\n            ParseGoogleCsv(contactInfo);\n        else\n            ParseOutlookCsv(contactInfo);\n    }\n\n    /// <summary>\n    /// Parse the information contained by a Google formatted .csv file to generate a new Contact object.\n    /// </summary>\n    private void ParseGoogleCsv(List<string> csv)\n    {\n        Console.WriteLine(\"Google CSV\");\n        // TODO\n    }\n    \n    /// <summary>\n    /// Parse the information contained by an Outlook formatted .csv file to generate a new Contact object.\n    /// </summary>\n    private void ParseOutlookCsv(List<string> csv)\n    {\n        Console.WriteLine(\"Outlook CSV\");\n        // TODO\n    }\n    \n    /// <summary>\n    /// Parse the information contained by the .vcf file to generate a new Contact object.\n    /// </summary>\n    private void ParseVcf()\n    {\n        // TODO\n    }\n    \n    /// <summary>\n    /// Parse the information contained by the .card file to generate a new Contact object.\n    /// </summary>\n    private void ParseCard()\n    {\n        // TODO\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/File.cs b/File.cs
--- a/File.cs	(revision 1be89cb8e9579f6eac9debee20ad7c79e6264b86)
+++ b/File.cs	(date 1681250699241)
@@ -7,7 +7,7 @@
 /// </summary>
 public class File
 {
-    public Contact Contact { get; }
+    public Contact Contact { get; set; }
     private string _filepath;
     private bool isGoogleCsv;
 
@@ -71,7 +71,9 @@
     /// </summary>
     private void ParseGoogleCsv(List<string> csv)
     {
-        Console.WriteLine("Google CSV");
+        string[] contact = csv.ToArray();
+        Contact = new Contact(contact[1],contact[2], null);
+        Console.WriteLine("Google contact: " + Contact.ToString());
         // TODO
     }
     
Index: Contact.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Contacts;\n\n/// <summary>\n/// Represents a contact inside of the contacts manager console application. Provides methods to update key information as well as methods to add and remove communication information.\n/// </summary>\npublic class Contact : IEquatable<Contact>\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public Birthday? Bday { get; set; }\n    public List<Address> Addresses { get; }\n    public List<Phone> Numbers { get; }\n    public List<string> Emails { get; }\n    public ContactCategory Type { get; set; }\n\n\n    /// <summary>\n    /// Create a new Contact object and initialize the data structures responsible for storing multiple addresses, phone numbers, and emails.\n    /// </summary>\n    /// <param name=\"firstName\">New contact's first name</param>\n    /// <param name=\"lastName\">New contact's last name</param>\n    /// <param name=\"type\">If null, defaults to \"Other\"</param>\n    public Contact(string firstName, string lastName, ContactCategory? type)\n    {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n        this.Type = type ?? ContactCategory.Other;\n\n        Addresses = new List<Address>();\n        Numbers = new List<Phone>();\n        Emails = new List<string>();\n    }\n\n    /// <summary>\n    /// Create a new Contact object.\n    /// </summary>\n    /// <param name=\"firstName\"></param>\n    /// <param name=\"lastName\"></param>\n    /// <param name=\"bday\"></param>\n    /// <param name=\"addresses\"></param>\n    /// <param name=\"numbers\"></param>\n    /// <param name=\"emails\"></param>\n    /// <param name=\"type\"></param>\n    public Contact(string firstName, string lastName, Birthday bday, List<Address> addresses, List<Phone> numbers, List<string> emails, ContactCategory? type)\n    {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n        this.Bday = bday;\n        this.Addresses = addresses;\n        this.Numbers = numbers;\n        this.Emails = emails;\n        \n        this.Type = type ?? ContactCategory.Other;\n    }\n\n    /// <summary>\n    /// If first = true, update only the first name, otherwise update the last name.\n    /// </summary>\n    /// <param name=\"name\">Updated name</param>\n    /// <param name=\"first\">First or last name</param>\n    public void UpdateName(string name, bool first)\n    {\n        if (first)\n            FirstName = name;\n        else\n            LastName = name;\n    }\n\n    /// <summary>\n    /// Update both the first name and the last name.\n    /// </summary>\n    /// <param name=\"fName\">Updated first name</param>\n    /// <param name=\"lName\">Updated last name</param>\n    public void UpdateName(string fName, string lName)\n    {\n        FirstName = fName;\n        LastName = lName;\n    }\n\n    /// <summary>\n    /// Associate a birthday with the contact.\n    /// </summary>\n    /// <param name=\"bday\">Birthday object to save</param>\n    public void UpdateBDay(Birthday bday)\n    {\n        this.Bday = bday;\n    }\n\n    /// <summary>\n    /// Associate a new address with the contact.\n    /// </summary>\n    /// <param name=\"a\">Address object to add</param>\n    public void AddAddress(Address a)\n    {\n        Addresses.Add(a);\n    }\n\n    /// <summary>\n    /// Disassociate an address from a contact.\n    /// </summary>\n    /// <param name=\"addrToRemove\">Address object to find and remove.</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the address is not associated with the contact.</exception>\n    public void RemoveAddress(Address addrToRemove)\n    {\n        if (!Addresses.Remove(addrToRemove))\n            throw new ArgumentException(\"Address does not exist.\");\n    }\n\n    /// <summary>\n    /// Add a new Phone to the contact.\n    /// </summary>\n    /// <param name=\"newPhone\">Phone object to add.</param>\n    public void AddPhone(Phone newPhone)\n    {\n        Numbers.Add(newPhone);\n    }\n\n    /// <summary>\n    /// Disassociate a phone from a contact.\n    /// </summary>\n    /// <param name=\"phoneToRemove\">Phone object to find and remove.</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the phone is not associated with the contact.</exception>\n    public void RemovePhone(Phone phoneToRemove)\n    {\n        if (!Numbers.Remove(phoneToRemove))\n            throw new ArgumentException(\"Phone number does not exist.\");\n    }\n\n    /// <summary>\n    /// Add a new email to the contact.\n    /// </summary>\n    /// <param name=\"email\">Email to add.</param>\n    public void AddEmail(string email)\n    {\n        Emails.Add(email);\n    }\n\n    /// <summary>\n    /// Disassociate an email from a contact.\n    /// </summary>\n    /// <param name=\"emailToRemove\">Email to search and remove.</param>\n    /// <exception cref=\"ArgumentException\">Thrown if the email is not associated with this contact.</exception>\n    public void RemoveEmail(string emailToRemove)\n    {\n        if (!Emails.Remove(emailToRemove))\n            throw new ArgumentException(\"Email does not exist.\");\n    }\n\n    /// <summary>\n    /// Updates the contact type, ie. the relationship to the contact.\n    /// </summary>\n    /// <param name=\"type\">Type to update to</param>\n    public void SetContactType(ContactCategory type)\n    {\n        this.Type = type;\n    }\n\n    // TODO: Need overloaded Equals methods for different situations. This is only checking if two Contact objects are equal, but an imported Contact may not be detected.\n    /// <summary>\n    /// Determines if two contacts are equal, to avoid potential duplication.\n    /// </summary>\n    /// <param name=\"contactToCompare\">Contact to compare to. If null, returns false.</param>\n    /// <returns>Whether or not the two contacts are the same.</returns>\n    public bool Equals(Contact? contactToCompare)\n    {\n        if (contactToCompare == null)\n            return false;\n\n        return this.GetHashCode() == contactToCompare.GetHashCode();\n    }\n\n    /// <summary>\n    /// Calculates the hashcode of a contact by combining the hashcodes of each field of a contact.\n    /// </summary>\n    /// <returns>The Contact's hashcode</returns>\n    public override int GetHashCode()\n    {\n        int code = 17;\n        code *= FirstName.GetHashCode();\n        code *= LastName.GetHashCode();\n        code *= Bday.GetHashCode();\n\n        foreach (Address a in Addresses)\n        {\n            code *= a.GetHashCode();\n        }\n\n        foreach (Phone p in Numbers)\n        {\n            code *= p.GetHashCode();\n        }\n\n        foreach (string e in Emails)\n        {\n            code *= e.GetHashCode();\n        }\n\n        code *= Type.GetHashCode();\n\n        return code;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Contact.cs b/Contact.cs
--- a/Contact.cs	(revision 1be89cb8e9579f6eac9debee20ad7c79e6264b86)
+++ b/Contact.cs	(date 1681250740657)
@@ -199,4 +199,9 @@
 
         return code;
     }
+
+    public override string ToString()
+    {
+        return LastName + ", " + FirstName;
+    }
 }
\ No newline at end of file
